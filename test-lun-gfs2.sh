#!/bin/bash

function error_exit {
    echo "Erro: $1"
    exit 1
}

# Ponto de montagem esperado (ajuste caso mude!)
MOUNT_POINT="/mnt/gfs2"

echo "=== Teste abrangente de LUN GFS2 compartilhada no ponto $MOUNT_POINT ==="

# 1. Verificar se o ponto de montagem existe e est√° montado GFS2
if mountpoint -q "$MOUNT_POINT"; then
    FS_TYPE=$(findmnt -no FSTYPE "$MOUNT_POINT")
    if [ "$FS_TYPE" != "gfs2" ]; then
        error_exit "O ponto de montagem $MOUNT_POINT n√£o est√° montado com sistema de arquivos GFS2 (encontrado: $FS_TYPE)"
    fi
    echo "‚úî $MOUNT_POINT est√° montado com GFS2."
else
    error_exit "Ponto de montagem $MOUNT_POINT n√£o est√° montado."
fi

# 2. Verificar status dos servi√ßos essenciais localmente
SERVICOS=(dlm_controld multipathd corosync pacemaker)
echo "Checando servi√ßos essenciais locais:"
for serv in "${SERVICOS[@]}"; do
    if systemctl is-active --quiet "$serv"; then
        echo "‚úî Servi√ßo $serv ativo"
    else
        echo "‚ö† Servi√ßo $serv N√ÉO est√° ativo!"
    fi
done

# 3. Verificar se existe daemon lvmlockd rodando
if pgrep -x lvmlockd >/dev/null; then
    echo "‚úî Daemon lvmlockd est√° rodando"
else
    echo "‚ö† Daemon lvmlockd N√ÉO est√° rodando!"
fi

# 4. Verificar status do cluster
echo "Verificando status do cluster..."
CLUSTER_STATUS=$(sudo pcs status 2>/dev/null | grep -E "(Online|Offline)" | head -1)
if [ -n "$CLUSTER_STATUS" ]; then
    echo "‚úî Cluster status: $CLUSTER_STATUS"
else
    echo "‚ö† N√£o foi poss√≠vel verificar status do cluster (pcs pode n√£o estar configurado)"
fi

# 5. Verificar se existe fencing configurado
STONITH_STATUS=$(sudo pcs stonith show 2>/dev/null | wc -l)
if [ "$STONITH_STATUS" -gt 0 ]; then
    echo "‚úî STONITH/Fencing configurado ($STONITH_STATUS dispositivo(s))"
else
    echo "‚ö† STONITH/Fencing N√ÉO configurado (recomendado para produ√ß√£o)"
fi

# 6. Detectar device usado no GFS2 (multipath ou direto)
DEVICE=$(findmnt -no SOURCE "$MOUNT_POINT")
echo "Device GFS2 detectado: $DEVICE"

# Verificar se √© multipath ou device direto
if [[ "$DEVICE" =~ ^/dev/mapper/ ]]; then
    echo "‚úî Usando device multipath: $DEVICE"
    # Verificar status do multipath
    MULTIPATH_STATUS=$(sudo multipath -ll "$DEVICE" 2>/dev/null | grep -E "(active|enabled)" | wc -l)
    if [ "$MULTIPATH_STATUS" -gt 0 ]; then
        echo "‚úî Status do multipath: OK"
    else
        echo "‚ö† Problema detectado no multipath para $DEVICE"
    fi
else
    echo "‚Ñπ Usando device direto: $DEVICE (adequado para laborat√≥rio)"
fi

# 7. Teste pr√°tico de escrita e leitura
TESTFILE="$MOUNT_POINT/test_gfs2_$(hostname)_$$.txt"
echo "Efetuando teste de escrita no arquivo $TESTFILE..."
echo "Teste GFS2 multipath - N√≥ $(hostname) - $(date)" > "$TESTFILE" || error_exit "Falha ao escrever no arquivo de teste."
sync

echo "Conte√∫do do arquivo ap√≥s escrita:"
cat "$TESTFILE"
echo

# 8. Verificar espa√ßo dispon√≠vel
echo "Informa√ß√µes de espa√ßo do GFS2:"
df -h "$MOUNT_POINT"

# 9. Verificar performance b√°sica de I/O
echo "Teste b√°sico de performance de escrita (10MB):"
time dd if=/dev/zero of="$MOUNT_POINT/test_performance_$$.tmp" bs=1M count=10 2>/dev/null && \
rm -f "$MOUNT_POINT/test_performance_$$.tmp" && \
echo "‚úî Teste de performance conclu√≠do"

# 10. Listar arquivos no ponto de montagem
echo "Listando arquivos existentes em $MOUNT_POINT:"
ls -la "$MOUNT_POINT"

# 11. Teste de locks DLM (avan√ßado)
echo "Verificando locks DLM ativos:"
LOCKS_COUNT=$(sudo gfs2_tool lockdump "$MOUNT_POINT" 2>/dev/null | wc -l)
if [ "$LOCKS_COUNT" -gt 0 ]; then
    echo "‚úî DLM locks ativos: $LOCKS_COUNT"
else
    echo "‚Ñπ Nenhum lock DLM ativo no momento (normal em sistema sem carga)"
fi

# 12. Informa√ß√µes detalhadas do GFS2
echo "Informa√ß√µes detalhadas do filesystem GFS2:"
sudo gfs2_tool df "$MOUNT_POINT" 2>/dev/null || echo "‚Ñπ gfs2_tool n√£o dispon√≠vel ou erro"

read -p "Agora, execute este script no outro n√≥ e verifique se o arquivo criado aqui aparece tamb√©m. Pressione Enter para continuar..."

# 13. Limpeza opcional
read -p "Deseja remover o arquivo de teste $TESTFILE? [s/N]: " CLEANUP
CLEANUP=${CLEANUP,,}
if [[ "$CLEANUP" == "s" || "$CLEANUP" == "y" ]]; then
    rm -f "$TESTFILE" || echo "Falha ao remover arquivo $TESTFILE"
    echo "‚úî Arquivo de teste removido"
else
    echo "‚Ñπ Arquivo de teste mantido para verifica√ß√£o no outro n√≥"
fi

echo
echo "Teste b√°sico conclu√≠do."

echo
cat << EOF

==== Resumo do Teste e Recomenda√ß√µes ====

‚úî SUCESSOS DETECTADOS:
- GFS2 montado e funcional em $MOUNT_POINT
- Device $DEVICE acess√≠vel
- Escrita/leitura funcionando
- Performance b√°sica OK

‚ö† VERIFICA√á√ïES ADICIONAIS RECOMENDADAS:
- Execute este script no OUTRO N√ì do cluster
- Verifique se o arquivo criado aparece instantaneamente no outro n√≥
- Teste escrita simult√¢nea de ambos os n√≥s
- Monitore logs: journalctl -u dlm_controld, journalctl -u corosync

üîß TROUBLESHOOTING (se houver problemas):
- Verifique servi√ßos: systemctl status corosync pacemaker dlm_controld
- Verifique cluster: sudo pcs status
- Verifique locks: sudo gfs2_tool lockdump $MOUNT_POINT
- Verifique logs: journalctl -xe
- Confirme fencing: sudo pcs stonith show

üìã PARA PRODU√á√ÉO:
- Configure STONITH real (n√£o dummy)
- Implemente monitoramento cont√≠nuo
- Configure backup adequado
- Teste cen√°rios de falha de n√≥
- Documente procedimentos de recupera√ß√£o

EOF
